function Bestselling_Item({product}) {
    return (
        <div>
            <div className='w-[350px] h-[350px]'>
                <img src={product.image_url[1]} className='object-cover'/>
            </div>
            <p className='font-bold'>{product.name}</p>
            <p>from <span >${product.price}</span></p>
        </div>

    )
}

const Dashboard_Bestselling = () => {
      const scrollRef = useRef()
      const navigate = useNavigate()
  
      const scrollLeft = () => {
          scrollRef.current.scrollBy({left: -400, behavior: 'smooth'})
      }
  
      const scrollRight = () => {
          scrollRef.current.scrollBy({left: 400, behavior: 'smooth'})
      }

      const handleClick = (productID) => {
        navigate(`/product/${productID}`)
      }
  
      return (
          <div className="relative">
              <h1 className='font-bold pt-12 pb-16'>Best-selling Hoa.</h1>

              {/* Scrollable content */}
              <div
                  ref={scrollRef}
                  className="overflow-x-auto no-scrollbar pl-30"
                  style={{
                    marginLeft: `-120px`,
                    marginRight: `-120px`,}}>
                  <div className="flex gap-10 w-max">
                  {products.map((product, i) => (
                      i<4 && <div key={product.product_id} onClick={() => handleClick(product.product_id)}>
                        <Bestselling_Item product={product} />
                      </div>
                  ))}
                  </div>
              </div>
           
              {/* Scroll Buttons 
              <button
                  onClick={scrollLeft}
                  className="absolute bottom-[-80px] right-[70px] w-10 h-10 bg-white text-gray-400 text-2xl font-extrabold rounded-full">
                  &lt;
              </button>
              <button
                  onClick={scrollRight}
                  className="absolute bottom-[-80px] right-[0px] w-10 h-10 text-gray-400 text-2xl font-extrabold bg-white rounded-full">
                  &gt;
              </button> */}
          </div>
      )
}

// -----
// Preview the slideshow of product image
// Two button (left, right) and the dots to move betwwen images.
function Product_Preview({images}) {
  const [index, setIndex] = useState(0)

  const nextImage = () => {
    setIndex((prev) => (prev+1) % images.length)
  }

  const prevImage = () => {
    setIndex((prev) => (prev+1) % images.length)
  }

 return (
    <div className="relative w-full max-w-[550px] overflow-hidden rounded-2xl">
        {/* Slide wrapper */}
        <div
            className="flex transition-transform duration-500 ease-in-out"
            style={{ transform: `translateX(-${index * 100}%)` }}>
            {images.map((img, i) => (
            <img
                key={i}
                src={img}
                alt={`Slide ${i}`}
                className="w-full object-cover h-[550px]"/>))}
        </div>

        {/* Buttons */}
        <button
            onClick={prevImage}
            className="absolute top-1/2 left-4 transform -translate-y-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow text-xl z-10">
            &lt;
        </button>

        <button
            onClick={nextImage}
            className="absolute top-1/2 right-4 transform -translate-y-1/2 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow text-xl z-10">
            &gt;
        </button>

        {/* Dots */}
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
            {images.map((_, i) => (
            <button
                key={i}
                className={`w-3 h-3 rounded-full ${
                i === index ? 'bg-black' : 'bg-gray-300'
                }`}
                onClick={() => setIndex(i)}>
            </button> ))}
        </div>
    </div>
  );
}


export default Product_Preview

function Search_Space_({isSearch, closeSearch}) {

  return (
    <AnimatePresence>
        {isSearch && 
        <motion.div>
            {/* Blur layer */}
            <motion.div className='fixed top-12 left-0 w-full h-full bg-black/10 backdrop-blur-sm z-150 flex items-center justify-center' 
                        onMouseEnter={closeSearch}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.3 }}
            ></motion.div>
            {/* White/Black layer */}
            <motion.div className='fixed top-12 left-0 w-full h-[300px] bg-white dark:bg-black z-151 flex items-center justify-center'
                        initial={{ y: -30, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        exit={{ y: -30, opacity: 0 }}
                        transition={{ duration: 0.5 }}>
            </motion.div>
            {/* Search */}
            <motion.div 
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        transition={{ duration: 0.3 }}>
                <ProductProvider>
                    <Search_Result closeSearch={closeSearch}/>
                </ProductProvider>
            </motion.div>
           
        </motion.div>}
    </AnimatePresence> 
  )
}


//----
import React, { useState } from 'react'
import Product_Preview from './components/product_preview';
import Product_Option from './components/product_option';
import Product_Extra from './components/product_extra';
import Product_Description from './components/product_description';
import Product_Delivery_Date from './components/product_delivery_date';
import {products, accessories} from  '../../data/dummy';
import { useParams } from 'react-router-dom';
import { useCart } from '../../context/CartContext';
import Product_Comment from './components/product_comment';
//import {ProductCalendarProvider, useProductCalendar} from '../../context/ProductCalendarContext';
import Product_Quantity from './components/product_quantity';
import { ProductDetailProvider, useProductDetail } from '../../context/ProductDetailContext';


function Product_Detail() {
 const {id} = useParams(); // return a tuple with many info, the first is id in url
 //const product = products.find((p) => p.product_id === id) // callback func

 const [date, setDate] = useState({Year: 2025, Month: 0, Day: 1})
 
 const updateDate = (year, month, day) => {
    const new_date = {
    Year: year,
    Month: month,
    Day: day };
    
    setDate(new_date)
 }

 if (!product) return <div>Product not found</div>;

 return (
    <ProductDetailProvider product={products.find((p) => p.product_id === id)}>
        <div className='relative w-full px-4 md:px-10 lg:px-32'>
            <div className='flex flex-col justify-between items-center md:items-start gap-4 md:gap-14 md:flex-row'>
                {/* Preview and Description */}
                <p className='font-semibold text-4xl mx-auto md:hidden'>{product.name}</p>
                <div className='w-full '><Product_Preview images={product.image_url}/></div>

                {/* Option */}
                <div className='w-full flex flex-col gap-4'>
                    <p className='font-semibold text-4xl mx-auto hidden md:flex'>{product.name}</p>
                    <Product_Option product={product} whichOption={option} setOption={setOption}/>
                    <Product_Extra product={product} whichExtra={extra} setExtra={setExtra}/>
                    <Product_Quantity quantity={quantity} setQuantity={setQuantity}/>

                    <div className='min-w-[300px] h-[50px] bg-green-800 flex items-center' onClick={() => {if(product.options.length!==0 && option!=="") {addCart({product_id: product.product_id, quantity: quantity, delivery_date: date, option: option}); if(extra) {addCart({product_id: extra.product_id, quantity: 1, delivery_date: date})}} }}>
                        <p className='font-semibold text-lg text-white mx-auto'>ADD TO CART</p>
                    </div>

                </div>
            </div>

            <Product_Comment product_id={product.product_id}/>
        </div>
    </ProductDetailProvider>
  );
}

export default Product_Detail


// self created cascade create Order
    const createOrder = async (subprice, off_price) => {
        const dataOrder = {
            data: {
                user_id: user.user_id,
                order_date: new Date(),
                shipping_address: shipping_address,
                order_status: 'Required',
                payment_method: whichPayment,
                total_amount: total_price,
                off_price: off_price
            }
        }

        // decrement stock in db and remove in cart
        //let error_products = new Set()
        let success_products =  []

        const promises = cart.map( async (item) => {
            if (!item.isSelected) return
            // pull
            try {
                const res = await GlobalApi.ProductApi.getById(item.product_id)
                
                if (!res) return
                const info = res.data.data
                const data = {
                    data: {
                        stock: info?.stock - (item?.option?.stems ?? 1)*item?.quantity
                    }} 
                // push db
                await GlobalApi.ProductApi.update(item.product_id, data).then(resp => {
                    success_products.push([item.product_id, item.option?.name])
                }, () => {
                    console.error('Decrease stock failed.')
                })

            } catch (err) {
                console.error('Fetch product failed.')
            }
        })

        await Promise.all(promises)
        if (success_products.size === 0) { navigate("/failure", {replace:true }); return}

        // create order then order item. If order success but order item fail => cascade rollback
        GlobalApi.OrderApi.create(dataOrder).then(resp => {
            const orderId = resp.data.data.documentId;
            
            const dataItem= {
                data: {
                    order_id: orderId,
                    products: cart.filter(item => item.isSelected && success_products.some(([id, optName]) =>
                        id === item.product_id && optName === item.option?.name
                    )).map(item => ({product_id: item.product_id, price: item.total_price, quantity: item.quantity, off_price: item.off_price, ...(item?.option != null && { option: item.option })}))
                }
            }
            
            GlobalApi.OrderItemApi.create(dataItem).then(resp => {
                // push cart
                /*
                const newCart = {
                    data: {
                        products: cart.filter(item => !success_products.has(item))
                    }
                }
                console.log(cartId)
                GlobalApi.CartApi.update(cartId, newCart).then(resp => {
                }, ()=>{console.log('Error: Push cart.')})*/

                setCart(cart.filter(item =>
                    !success_products.some(([id, optName]) =>
                        id === item.product_id && optName === item.option?.name
                    )
                ))

                navigate("/success", { replace: true })
            }, async () => {
                console.log("Cascade rollback: order is not successful.")

                try {
                    await GlobalApi.OrderApi.delete(orderId);
                } catch (err) {
                    console.error("Rollback failed", err);
                }

                navigate("/failure", {replace: true })
        })})
    }